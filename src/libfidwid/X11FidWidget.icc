// This file is part of libfidwid.
//
// libfidwid is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// libfidwid is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with libfidwid.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
QSize
X11FidWidget::sizeHint() const
{
  return QSize( _xImage->width, _xImage->height);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
template<typename SRCTYPE, typename Converter>
void
X11FidWidget::setImagePerLine( SRCTYPE src, const Converter& conv)
{

//   std::cerr << "X11FidWidget::setImagePerLine(): " << std::endl
//             << "  convert frame to " << _depth << " bit... " << std::endl
//             << "  Image dimensions: " << width() << "x" << height() << "... "
//             << std::flush;

  /*-----------------------------------------------------------------------
   *  copy and convert the given image data to actual display depth
   *-----------------------------------------------------------------------*/
  switch( _depth)
  {
  case 16:
    for( int i=0; i < height(); ++i)
    {
      // target type should be resolved properly
      conv.lineToRgb16( src, reinterpret_cast<unsigned short*>(_rowStart[i]),
                        width(), _subSampling);
      src += (unsigned int) (width() * conv.srcBytePerPixel() *
                             _subSampling * _subSampling);
    }
    break;
  case 24:
    for( int i=0; i < height(); ++i)
    {
      conv.lineToBgr8( src, _rowStart[i], width(), 1, _subSampling);
      src += (unsigned int) (width() * conv.srcBytePerPixel() *
                             _subSampling * _subSampling);
    }
    break;
  case 32:
    for( int i=0; i < height(); ++i)
    {
      conv.lineToRgba8( src, _rowStart[i], width(), _subSampling);
      src += (unsigned int) (width() * conv.srcBytePerPixel() *
                             _subSampling * _subSampling);
    }
    break;
  default:
    break;
  }
  
//   std::cerr << "done" << std::endl;

  /*-----------------------------------------------------------------------
   *  repaint the image
   *-----------------------------------------------------------------------*/
  update();
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
int
X11FidWidget::depth() const
{
  return _depth;
}

inline
void
X11FidWidget::setSubSampling(const unsigned int subSampling) 
{
  if (_subSampling == subSampling) return;
  unsigned int subSampling_old = _subSampling;
  _subSampling = subSampling;
  setImageSize(_xImage->width * subSampling_old,
               _xImage->height * subSampling_old);
}

inline
unsigned int
X11FidWidget::subSampling() const 
{
  return _subSampling;
}
