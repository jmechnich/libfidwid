// This file is part of libfidwid.
//
// libfidwid is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// libfidwid is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with libfidwid.  If not, see <http://www.gnu.org/licenses/>.

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:  setImage()
 *  ==> see headerfile
 *=======================================================================*/
template< typename Iterator, typename Converter>
void FastImageDisplayWid::setImage( const Iterator& begin, const Iterator& end,
                                    const Converter& conv)
{
  /*-----------------------------------------------------------------------
   *  copy and convert the given image data to actual display depth
   *-----------------------------------------------------------------------*/
  unsigned char* trg = reinterpret_cast<unsigned char*>(_xImage->data);
  Iterator src = begin;
  int nValues = end - begin;

  if (_subSampling == 1) 
  {

    switch( _depth)
    {
    case 16:
      while( nValues > 4)
      {
        conv.fourValuesToRgb16( src, trg);
        src += 4;
        trg += 8;
        nValues -= 4;
    }
    while( nValues > 0 && src != end) 
    {
      conv.singleValueToRgb16( src, trg);
      ++src;
      trg += 2;
    }
    break;
    
    case 24:
//    while( nValues > 4)
//    {
//      conv.fourValuesToRgb24( src, trg);
//      src += 4;
//      trg += 12;
//      nValues -= 4;
//    }
//    while( src != end) 
//    {
//      conv.singleValueToRgb24( src, trg);
//      ++src;
//      trg += 3;
//    }
//    break;
//
//
    case 32:
      while( nValues > 4)
      {
        conv.fourValuesToRgb32( src, trg);
        src += 4;
        trg += 16;
        nValues -= 4;
      }
      while( nValues > 0 && src != end) 
      {
        conv.singleValueToRgb32( src, trg);
        ++src;
        trg += 4;
      }
      break;
    }
  }
  else 
  {
    // ToDo: implement subSampling 
  }
    
  /*-----------------------------------------------------------------------
   *  repaint the image
   *-----------------------------------------------------------------------*/
  update();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
template<typename SourceIterator, typename Converter>
void
FastImageDisplayWid::setImagePerLine( SourceIterator src,             
                                      const Converter& conv,
                                      unsigned int width,
                                      unsigned int height,
                                      unsigned int padding)
{
  /*-----------------------------------------------------------------------
   *  copy and convert the given image data to actual display depth
   *-----------------------------------------------------------------------*/
  if( width == 0)
      width = FastImageDisplayWid::width();
  
  if( height == 0)
      height = FastImageDisplayWid::height();
  
  int nLines = height;
  unsigned char* trg = reinterpret_cast<unsigned char*>(_xImage->data);

  switch( _depth)
  {
  case 16:
    break;
  case 24:
    while( nLines > 0)
    {
      conv.lineToBgr8( src, trg, width, 1, _subSampling);
      src += (size_t) ( width * conv.srcBytePerPixel() * _subSampling);
//      src += padding;
      trg += width*4;
      nLines -= _subSampling;
    }
    break;
  case 32:
    while( nLines != 0)
    {
      conv.lineToRgba8( src, trg, width, _subSampling);
      src += (size_t) ( width * conv.srcBytePerPixel() * _subSampling);
//      src += padding;
      trg += width*4;
      nLines -= _subSampling;
    }
    break;
  default:
    break;
  }
  
  /*-----------------------------------------------------------------------
   *  repaint the image
   *-----------------------------------------------------------------------*/
  update();
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
unsigned char*
FastImageDisplayWid::data()
{
  return reinterpret_cast<unsigned char*>( _xImage);
}


/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
int
FastImageDisplayWid::depth() const
{
  return _depth;
}

inline
void FastImageDisplayWid::setSubSampling(const unsigned int subSampling) 
{
  if (_subSampling == subSampling) return;
  setImageSize(_xImage->width * _subSampling,
               _xImage->height * _subSampling);
  _subSampling = subSampling;
}

inline
unsigned int FastImageDisplayWid::subSampling() const
{
  return _subSampling;
}
